"""""""""""""""""""""""""""""""""""""""""""""""""
"
" File:     .vimrc - vim resource file
"
" Version:  2.3 - 2015-01-11
"
" Index:
"   General:            
"   VIM_interface:      
"   Color_and_encoding: 
"   Backup_Undo_tags_swap:
"   File:               
"   Text:               
"   Plugin_configuration:
"   Key_mappings:
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""
" The layout of the config file is inspired by
" http://amix.dk/vim/vimrc.html 

"""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""
" Disable vi compatibility
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'kien/ctrlp.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'vim-scripts/UltiSnips'
Plugin 'tpope/vim-surround'
Plugin 'vimwiki/vimwiki'
Plugin 'itchyny/lightline.vim'
Plugin 'reedes/vim-pencil'
Plugin 'honza/vim-snippets'
Plugin 'vim-scripts/CRefVim'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/syntastic'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'jceb/vim-orgmode'
Plugin 'tpope/vim-speeddating'
Plugin 'vim-scripts/utl.vim'
Plugin 'mattn/calendar-vim'
Plugin 'teranex/vimwiki-tasks'

call vundle#end()
" Enable filetype plugins
filetype plugin indent on

" Auto reload the file when it is changed outside vim
set autoread
" Set the leader key
let mapleader = ","
let maplocalleader = ","
let g:maplocalleader = ","
let g:mapleader = ","

"""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM_interface
"""""""""""""""""""""""""""""""""""""""""""""""""
" Set the scrolloff visible while scrolling with j/k
set scrolloff=7

" Show the status-line in each window
set laststatus=2

" Show partial command in the status line
set showcmd

" Enable the wild menu and set the mode
set wildmenu
set wildmode=list:longest

" Ignore some files in the wildmenu
set wildignore=*.o,*~,*.pyc

" Set the behaviour of the backspace
set backspace=eol,start,indent

" Make the search case insensitive
set ignorecase

" Make the search case sensitive when uppercase is typed
set smartcase

" Highlight the search results
set hlsearch

" Hide abandoned buffers
set hidden

" Jump to the first available search result immediately
"set incsearch

" Don't redraw the window while executing macros
set lazyredraw

" Show matching brackets
set showmatch

" how long?
set matchtime=1

" Disable bells
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show (relative) line numbers
"set relativenumber
set number

" smoother redrawing 
set ttyfast

" Better line wraps
set showbreak=↪

"""""""""""""""""""""""""""""""""""""""""""""""""
" => Color_and_encoding
"""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax on

set t_Co=256
set background=dark
let g:hybrid_use_Xresources = 1
if &term=~'linux'
    colorscheme default
else
    colorscheme hybrid
endif

" Set the pop-up menu colors
"hi Pmenu ctermfg=0 ctermbg=6 guibg=#444444
"hi PmenuSel ctermfg=7 ctermbg=4 guibg=#555555 guifg=#ffffff

" Fix unreadable colors in vimdiff
highlight! link DiffText MatchParen

if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Set the default encoding
set encoding=utf8

"""""""""""""""""""""""""""""""""""""""""""""""""
" => File
"   -> backups, undo, tags, swap
"""""""""""""""""""""""""""""""""""""""""""""""""
" Keep backups of the files
set backup
set backupdir=~/.vim/tmp/backup//,/var/tmp//,/tmp//,.
set backupskip=/tmp/*

" Save the undo history
set undofile
set undodir=~/.vim/tmp/undo//,/var/tmp//,/tmp//,.
set undolevels=1000

" Set where to save tags 
set tags=./tags;/

" Set where to save the swap file
set dir=~/.vim/tmp/swap//,/var/tmp//,/tmp//,.


"""""""""""""""""""""""""""""""""""""""""""""""""
" => Text
"   -> tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""
" Make spaces, not war 
set expandtab

" make tabs super smart
set smarttab

" Set how much spaces to insert on <tab>
set tabstop=4
set shiftwidth=4

" Show a bar on 85 characters
"set colorcolumn=85

" Some indent settings
set autoindent
set smartindent

" Set how to do automatic formatting
set formatoptions+=qrn1

" Set how to do insert completion
"set completeopt=longest,menuone

" Code folding settings
set foldmethod=indent
set foldlevel=99

"""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin_configuration
"""""""""""""""""""""""""""""""""""""""""""""""""

" calendar.vim
function MyCalAction(day, month, year, week, dir)
    exe "normal qa" . a:year . "-" . a:month . "-" . a:day
endfunction
let g:calendar_action = 'MyCalAction'

nmap <F10> :Calendar<CR>
imap <F10> <ESC>:Calendar<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>
nmap <F9> :TagbarOpenAutoClose<CR>

"" support for markdown
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

"" support for asciidoc
let g:tagbar_type_asciidoc = {
    \ 'ctagstype' : 'asciidoc',
    \ 'kinds' : [
        \ 'h:table of contents',
        \ 'a:anchors:1',
        \ 't:titles:1',
        \ 'n:includes:1',
        \ 'i:images:1',
        \ 'I:inline images:1'
    \ ],
    \ 'sort' : 0
\ }

" YouCompleteMe
let g:ycm_auto_trigger = 0

" javacomplete omnicomplete autocmd
if has("autocmd")
    autocmd FileType java setlocal omnifunc=javacomplete#Complete
endif
setlocal completefunc=javacomplete#CompleteParamsInfo

" vimwiki
let wiki = {}
let wiki.path = '~/docs/wiki/'
let wiki.nested_syntaxes = {'python': 'python', 'c': 'c'}
let g:vimwiki_list = [wiki]
let g:vimwiki_use_calendar = 0

" UltiSnips
imap <Nul> <Nop>
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" LaTex
set grepprg=grep\ -nH\ $*

let g:tex_flavor = "latex"
let g:Tex_ViewRule_pdf  = "zathura"
let g:Tex_ViewRule_dvi  = "xdvi"
let g:Tex_DefaultTargetFormat = "pdf"

" lightline
let g:lightline = {
    \ 'colorscheme' : 'jellybeans',
    \ 'active': {
    \   'left' : [  [ 'mode', 'paste' ],
    \               [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function' : {
    \   'fugitive': 'MyFugitive',
    \   'readonly': 'MyReadonly',
    \   'modified': 'MyModified'
    \ },
    \ 'separator' : { 'left' : '', 'right' : '' },
    \ 'subseparator' : { 'left': '|', 'right': '|' }
    \ }

function! MyModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! MyReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return ""
    else
        return ""
    endif
endfunction

function! MyFugitive()
    if exists('*fugitive#head') 
        let _ = fugitive#head()
        return strlen(_) ? '⭠ '._ : ''
    endif
    return ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                \ ('' != expand(%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

"Always display the statusline in all windows
set laststatus=2
"Hide the default mode text (e.g. -- INSERT -- below the statusline 
set noshowmode 
 
"""""""""""""""""""""""""""""""""""""""""""""""""
" => Key_mappings
"""""""""""""""""""""""""""""""""""""""""""""""""
" move the current line down with '-'
map - ddp

" Never go into Ex mode.
nnoremap Q <nop>

" Move between windows with CTRL+h/j/k/l                                             
map <c-j> <c-w>j                                                                     
map <c-k> <c-w>k                                                                     
map <c-l> <c-w>l                                                                     
map <c-h> <c-w>h 

" Resize windows with CTRL+UP/DOWN/RIGHT/LEFT
noremap <C-Up> <C-W>-
noremap <C-Down> <C-W>+
noremap <C-Left> <C-W><
noremap <C-Right> <C-W>>

" Disable <F1> for help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Clear the search results
nnoremap <leader><space> :noh<cr>

" Set keys to toggle spell checking
map zz :setlocal spell!<cr>

" Remap spell key mappings 
map zn ]s
map zp [s

"  switch buffer with Ngb e.g. 3gb switches to the 3rd buffer
let c = 1
while c <= 99
  execute "nnoremap " . c . "gb :" . c . "b\<CR>"
  let c += 1
endwhile

